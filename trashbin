
{-
------------------------------------------------------------
UPDATING FUNCTIONS
------------------------------------------------------------
-}





-- handleEvent :: Event -> World -> World
-- handleEvent (EventKey (SpecialKey KeyUp) Down _ _) w = tryMove w UP
-- handleEvent (EventKey (SpecialKey KeyDown) Down _ _) w = tryMove w DOWN
-- handleEvent (EventKey (SpecialKey KeyLeft) Down _ _) w = tryMove w LEFT
-- handleEvent (EventKey (SpecialKey KeyRight) Down _ _) w = tryMove w RIGHT
-- handleEvent _ w = w

-- updateFunc :: Float -> World -> World
-- updateFunc t (World (Player (x, y) dir next (vx, vy)) b)
--   | dir /= next = move (World (Player (x, y) dir next (vx, vy)) b) next t
--   | otherwise = move (World (Player (x, y) dir next (vx, vy)) b) dir t

-- drawFunc :: World -> Picture
-- drawFunc world = Pictures (drawGame world)

-- drawGame :: World -> [Picture]
-- drawGame (World p b) = drawBoard b ++ ((Color black (translate 500 500 (Circle 10))): (Color black ((Circle 10))) : drawPlayer p : [] ) 
-- getNodePics w = drawPlayer w : genCircles (getPoints w)

-- drawPlayer :: Player -> Picture -- todo no offset for now
-- drawPlayer (Player (x, y) _ _ _) = Color black ((translate x y) (Circle 15))
--  where
--     a = x * 100 - 150 -- off set not used right now
--     b = y * 100 - 150

-- drawBoard :: Board -> [Picture]
-- drawBoard (Board []) = [] 
-- drawBoard (Board (t:ts)) = drawTile t : drawBoard (Board (ts))





-- genCircles :: [(Int, Int)] -> [Picture]
-- genCircles [] = []
-- genCircles ((x, y):pts) = Color red (translate a b (Circle 20)) : genCircles pts
--   where
--     a = fromIntegral (x * 100 - 150)
--     b = fromIntegral (y * 100 - 150)

-- getPoints :: World -> [(Int, Int)]
-- getPoints (World _ _ _ (Grid points)) = points


-- data Direction = UP | DOWN | LEFT | RIGHT | NONE
--   deriving (Enum, Eq, Show)

-- getGrid :: Int -> Int -> [(Int, Int)]
-- getGrid l w = [(x, y) | x <- [0..l], y <- [0..w]]


-- tryMove :: World -> Direction -> World
-- tryMove (World (Player pos curr next v) b) dir =   
--   (World (Player pos curr dir v) b)

-- move :: World -> Direction -> Float -> World
-- move (World (Player (x, y) curr next (vx, vy)) b) dir t
--   | validMove (Player (x, y) curr next (vx, vy)) dir b = (World (Player (dx, dy) dir next (getVelocity dir)) b)
--   | otherwise = (World (Player (dx, dy) curr next (vx, vy)) b) -- do nothing
--   where 
--     dx = x + vx * 0.01
--     dy = y + vy * 0.01

-- move (World (Player (x, y) curr next (vx, vy)) b) dir t =
--   (World (Player (dx, dy) dir next (getVelocity dir)) b)
--   where 
--     dx = x + vx * t
--     dy = y + vy * t

{- 
we want to 
(1) see where the player is: Zone -> Node
(2) see if that's a valid direction from there
-}
-- validMove :: Player -> Direction -> Board -> Bool
-- validMove (Player (x, y) _ _ _) dir b =
--   -- do 
--     -- something dirs
--     elem dir dirs 
--   where 
--     currNode = getNode (Point (x, y)) b
--     dirs = getDirs currNode

-- something :: [Direction] -> IO()
-- something dirs = print dirs 

-- getVelocity :: Direction -> (Float, Float)
-- getVelocity dir
--   | dir == UP    = (0.0,  85.0)
--   | dir == DOWN  = (0.0, -85.0)
--   | dir == LEFT  = (-85.0, 0.0)
--   | dir == RIGHT = ( 85.0, 0.0)
--   | otherwise = (0, 0)

-- specialKeyPressed :: Event -> Bool
-- specialKeyPressed (EventKey (Char k) _ _ _) = k == 'g'
-- specialKeyPressed _ = False









{-
POTENTIAL CLEANUP, a little janky, need to to not queue so persistently, but a start

{-
first, if the player currdir /= nextdir, check 
  if they're at close enough to end of their track
    grab the pivot (via player destination) from the board, try to grab the corresponding neighbor from that pivot
    if its null
      instead keep trying to go the same direction as before, can't turn there
      if that is null, stop moving -- keep same location
want to clean this up, works well enough to continue testing, but there's def some gunk to cut out
-}
movePlayer :: Player -> Board -> Player
movePlayer (Player loc (dest, []) curr next) _ = Player loc (dest, [loc]) curr next
movePlayer (Player _ (dest, t:ts) curr next) b
  | curr /= next && closeEnough ts = changeDir (Player t (dest, ts) curr next) b
  | curr == next && needRefill ts = sameDir (Player t (dest, ts) curr curr) b
  | otherwise = Player t (dest, ts) curr next
    


-- queueTracks :: Player -> Board -> Player
-- queueTracks (Player loc (dest, ts) curr next) b -- we are attempting oto queue up the next move
--   | curr /= next = changeDir (Player loc (dest, ts) curr next) b 
--   | otherwise = sameDir (Player loc (dest, ts) curr next) b 

-- todo clean up
changeDir :: Player -> Board -> Player
changeDir (Player loc (Destination point, ts) curr next) b 
  | nextTracks == Null = Player loc (Destination point, ts) curr curr
  | otherwise = Player loc (deconDestination nextTracks, ts ++ deconTracks nextTracks) next next
  where 
    nextPiv = getPivot point b
    nextTracks = getTracks nextPiv next



-- todo clean up
sameDir :: Player -> Board -> Player
sameDir (Player loc (Destination point, ts) curr _) b 
  | nextTracks == Null = Player loc (Destination point, ts) curr curr 
  | otherwise = Player loc (deconDestination nextTracks, ts ++ deconTracks nextTracks) curr curr
  where 
    nextPiv = getPivot point b
    nextTracks = getTracks nextPiv curr

-- sameDir (Player loc (Destination point, []) curr _) _ = Player loc (Destination point, []) curr curr
-- sameDir (Player loc (Destination point, [t]) curr _) b

-- sameDir (Player loc (Destination point, ts) curr next) _ = Player loc (Destination point, ts) curr next

closeEnough :: [a] -> Bool
closeEnough xs = length xs <= 25

needRefill :: [a] -> Bool
needRefill [] = True
needRefill [_] = True
needRefill _ = False

-}


-- getTopRightCors :: [Point]
-- getTopRightCors = [Point (x, y) | x <- [1..(getLength)], y <- [1..(getHeight)]]

-- -- give me the level number and top right corners of the inner walls
-- genGrid :: Int -> [Point] -> [Tile]
-- genGrid _ [] = []
-- genGrid lvlNum (p:pts)
--     | isBoundary p walls = (genTile zone Wall) : genGrid lvlNum pts-- this is a wall
--     | otherwise = (genTile zone node) : genGrid lvlNum pts-- this is a valid pathway
--     where 
--         walls = getWalls lvlNum
--         zone = constructZone p
--         node = constructNode p walls
--     -- we need to connect it to the surrounding non nodes

-- genTile :: Zone -> Node -> Tile
-- genTile z n = Tile (z, n)

-- getWalls :: Int -> [Point]
-- getWalls lvlNum 
--     | lvlNum == 1 = lvl1Walls -- todo, more levels
--     | otherwise = lvl1Walls



-- constructZone :: Point -> Zone
-- constructZone (Point (x, y)) = Zone (offset (x - 1)) (offset x) (offset (y - 1)) (offset y)

-- constructNode :: Point -> [Point] -> Node
-- constructNode p walls = Path (getCenter p) (constructZone p) (possibleDirections p walls)

-- getCenter :: Point -> Center
-- getCenter (Point (x, y)) = Center (Point (offset x - 50, offset y - 50)) -- very simple for now

-- possibleDirections :: Point -> [Point] -> [Direction]
-- possibleDirections p walls  = filter (\d -> d /= NONE) ds
--     where 
--         ds = (up p walls) : (down p walls) : (left p walls) : (right p walls) : []
    
-- getNode :: Point -> Board -> Node
-- getNode _ (Board []) = None
-- getNode (Point (x, y)) (Board ((Tile (Zone x1 x2 y1 y2, node)):tiles))
--     | and [xStart >= x1 + 20, xEnd <= x2 - 20, yStart >= y1 + 20, yEnd <= y2 - 20] = node
--     | otherwise = getNode (Point (x, y)) (Board tiles)
--     where
--         xStart = fromInteger (floor  x)
--         xEnd = fromInteger (ceiling x)
--         yStart = fromInteger (floor y)
--         yEnd = fromInteger (ceiling y)

-- getDirs :: Node -> [Direction]
-- getDirs (Path _ _ d) = d
-- getDirs _ = []

-- up :: Point -> [Point] -> Direction
-- up (Point (x, y)) walls
--     | isBoundary upP walls = NONE
--     | otherwise = UP
--     where 
--         upP = Point (x, y + 1)

-- down :: Point -> [Point] -> Direction
-- down (Point (x, y)) walls
--     | isBoundary downP walls = NONE
--     | otherwise = DOWN
--     where 
--         downP = Point (x, y - 1)

-- left :: Point -> [Point] -> Direction
-- left (Point (x, y)) walls
--     | isBoundary leftP walls = NONE
--     | otherwise = LEFT
--     where 
--         leftP = Point (x - 1, y)

-- offset :: Float -> Float
-- offset x = x * 50 - 100

-- right :: Point -> [Point] -> Direction
-- right (Point (x, y)) walls
--     | isBoundary rightP walls = NONE
--     | otherwise = RIGHT
--     where 
--         rightP = Point (x + 1, y)


-- isBoundary :: Point -> [Point] -> Bool
-- isBoundary (Point (x, y)) walls = 
--     elem (Point (x, y)) walls 
--     || x == 0 || x > getLength
--     || y == 0 || y > getHeight

-- getHeight :: Float
-- getHeight = 4

-- getLength :: Float
-- getLength = 4




-- --                      (up,    down,  left,  right)
-- data Graph = Nil | Node (Graph, Graph, Graph, Graph) Int Int
--     deriving (Eq, Show)

-- take in (1) the x size, (2) y size, return a list of iterative coordinates
-- getCoords :: Int -> Int -> [(Int, Int)]
-- getCoords l w = [(x, y) | x <- [0..l], y <- [0..w]]

-- getNodes ::  [(Int, Int)] -> [Graph]
-- getNodes = map go
--     where 
--         go (x, y) = Node (Nil, Nil, Nil, Nil) x y

-- connectNodes :: [Graph] -> [Graph]
-- connectNodes nodes = connectRows nodes
--     -- where 
--         -- r =  
--         -- l = connectLeft r
--         -- u = connectUp l
--         -- finished = connectDown u

-- connectRows :: [Graph] -> [Graph]
-- -- connectRight ((Node (u1, d1, l1, r1) x1 y1) : (Node (u2, d2, l2, r2) x2 y2) : nodes) 
-- --     | 

-- connectRows (n:nodes) = connL (connR sameRows)
--     where 
--         sameRows = allNodesInRow (getRow n) (n:nodes)
--         -- ascending = sortAscending sameRows

-- connR :: [Graph] -> [Graph]
-- connR [n] = [n]
-- connR ((Node (u1, d1, l1, r1) x1 y1):(Node (u2, d2, l2, r2) x2 y2):nodes) =
--     (Node (u1, d1, l1, (Node (u2, d2, l2, r2) x2 y2)) x1 y1) : connR (((Node (u2, d2, l2, r2) x2 y2)): nodes)

-- connL :: [Graph] -> [Graph]
-- connL [n] = [n]
-- connL ((Node (u1, d1, l1, r1) x1 y1):(Node (u2, d2, l2, r2) x2 y2):nodes) =
--     (Node (u1, d1, l1, r2) x1 y1) 
--     : (Node (u2, d2, (Node (u1, d1, l1, r2) x1 y1) , r2) x2 y2)
--     : connR ((Node (u2, d2, (Node (u1, d1, l1, r2) x1 y1) , r2) x2 y2): nodes)

-- connectLeft :: [Graph] -> [Graph]
-- connectLeft = undefined

-- connectUp :: [Graph] -> [Graph]
-- connectUp = undefined

-- connectDown :: [Graph] -> [Graph]
-- connectDown = undefined

-- allNodesInRow :: Int -> [Graph] -> [Graph]
-- allNodesInRow row nodes = filter pred nodes
--     where 
--         pred (Node (_) x y) = y == row

-- allNodesInCol :: Int -> [Graph] -> [Graph]
-- allNodesInCol col nodes = filter pred nodes
--     where 
--         pred (Node (_) x y) = x == col

-- getRow :: Graph -> Int
-- getRow (Node (_) r _) = r

-- getCol :: Graph -> Int
-- getCol (Node (_) _ c) = c
-- -- genPath


-- dfsRefillV2 :: Int -> Board -> Point -> Neighbor ->  [Point] -> [Track]
-- dfsRefillV2 order b dest (Neighbor (Destination pt) trackToNeighbor) visited
--   | pt == dest = trackToNeighbor
--   | pt `elem` visited = []
--   | otherwise = forEachNeighbor next
--   where 
--     next = getValidNeighbors b pt order -- why does 3 and 4 black screen of death the damn thing?????
--     forEachNeighbor [] = []
--     forEachNeighbor (n:neighbors) 
--       | null (dfsRefillV2 order b dest n (pt:visited)) = forEachNeighbor neighbors
--       | otherwise = trackToNeighbor ++ dfsRefillV2 order b dest n (pt:visited)




-- board, destination, current point, visited list -> how we got here -> path list -> RETURN the path to take
dfsRefill :: Int -> Board -> Point -> [Neighbor] ->  [Point] -> [Track] -> [Track]
dfsRefill order b dest [] visited path = path
dfsRefill order b dest ((Neighbor (Destination pt) trackToNeighbor):stack) visited path 
  | not (null path) && notAdjacent pt (last path) = path
  -- | null next = path
  | pt == dest = path ++ trackToNeighbor -- pathToGetHere ++ trackToNeighbor
  | otherwise = 
    if pt `elem` visited 
      then dfsRefill order b dest (stack) (visited) path
      else  dfsRefill order b dest (next ++ stack) (pt:visited) (path ++ trackToNeighbor)
  where 
    next = getValidNeighbors b pt order


    
notAdjacent :: Point -> Point -> Bool
notAdjacent (x1, y1) (x2, y2)
  | sameCol (x1, y1) (x2, y2) = max y1 y2 - min y1 y2 > 50
  | sameRow (x1, y1) (x2, y2) = max x1 x2 - min x1 x2 > 50
  | otherwise = True


  withinLineOfSight :: Point -> Point -> Bool
withinLineOfSight p g = sameCol p g || sameRow p g

getRandomOrder :: Float -> Int -- REMOVE
getRandomOrder x = (abs (round x) * 7) `mod` 2
-- getRandomOrder :: Float -> Int
-- getRandomOrder _ = 2



{-
to do here:
need to update the ghost drawing function to be like white or some shit, basic user feedback
trickiest part: need to have some sort of timing mechanism.

thots on timing.
could add another thing to the player or board.
i like player more.
it would be hypothetically reasonable to have many collectibles with diff effects
have a [] of what would effectively be timers
thinking something like (float, effect, float(end effect time?))
so that if we don't have that effect in the list, add it, start timer as 0, and set whatever the effect end time is (can be within the collectible)
if we already have that effect in the list, simply reset the timer. or add to end time, whatever makes sense
if timer >= end, effect is off, "remove" it from the timer list
  actually, have updateplayer check the effect timers as well as move the player. that's just fine.
  then we will need some sort of checkActiveEffects that takes the board that sees what effects are on going in the player's timers, and changes the drawing or update functions needed?

then it really just comes down to how to have a timer. 
we do ignore the time since last frame value in update in main rn. 
i could give that to the update function and see how that works.

-}


{-
okay let's think it through.
when we find the collectible, we need to see what kind it is.
within the collectible there is an effect associated. 
it feels like we need to test upon the effect. 
what do we want to happen based on the cherry effect
-}

{-
for checking the timers, removing effects as necessary.
but we need to keep timers as they come

what is this method doing? 

it's basically there to see if the timer is up and revert
-}

-- dfsRefill :: Board -> Point -> Point -> Pivot -> [Point] -> [Track] -> [Track]
-- dfsRefill b dest curr (Pivot pt (up, down, left, right)) visited path
--   | dest == curr || null validNeighbors = path
--   | otherwise = 
--       dfsRefill b dest (getNeighborPoint (head validNeighbors)) (getPiv (getPivot (getNeighborPoint (head validNeighbors)) b)) (pt:visited) (path ++ (getNeighborTrack (head validNeighbors)))

    


-- getNeighborTrack :: Neighbor -> [Track]
-- getNeighborTrack (Neighbor _ track) = track
-- getNeighborTrack _ = error "don't give this null, dummy"

{-
------------------------------------------------------------
DECONSTRUCTORS

essentially getters for easy reading
------------------------------------------------------------
-}

-- deconDestination :: Neighbor -> Destination
-- deconDestination (Neighbor _ dest _) = dest

-- deconTracks :: Neighbor -> [Track]
-- deconTracks (Neighbor _ tracks) = tracks
-- up down left right
-- data Pivot = Pivot Point (Neighbor, Neighbor, Neighbor, Neighbor)
-- data Neighbor = Null | Neighbor Direction Destination From

-- rgb(157, 157, 157)-- rgb(157, 157, 157)